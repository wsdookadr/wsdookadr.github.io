<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Blog</title><link>https://wsdookadr.github.io/tags/python/</link><description>Recent content in python on Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 12 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wsdookadr.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Counting non-intersecting double-diagonals in polygons</title><link>https://wsdookadr.github.io/posts/p10/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p10/</guid><description>MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], displayMath: [['$$','$$'], ['\[','\]']], processEscapes: true, processEnvironments: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], TeX: { equationNumbers: { autoNumber: "AMS" }, extensions: ["AMSmath.js", "AMSsymbols.js"] } } }); MathJax.Hub.Queue(function() { // Fix tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i A friend told me recently he was solving a problem about polygons.</description></item><item><title>Creating mosaics, clipping and removing overlapping satellite images</title><link>https://wsdookadr.github.io/posts/p5/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p5/</guid><description>Intro This post describes ways to download, clip and join satellite images. The module sentinel-mosaic is used throughout this blog post.
Background There’s a number of satellites launched by the European Space Agency that take images of Earth which are then sent to ground stations and made publicly available through the Copernicus Open Access Hub and its respective API.
In this post we’re focusing mainly on the data from Sentinel-2A and Sentinel-2B which were designed for multiple purposes, one of those purposes being land monitoring.</description></item><item><title>Polygon gridding using Geopandas and Shapely</title><link>https://wsdookadr.github.io/posts/p4/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p4/</guid><description>Intro This post will discuss some work involving maps I’ve helped a client with. The main goal of the project was collecting various datasets from web services.
One of those web services has an endpoint that receives as a parameter a series of points that define a polygon for which the API request is made (the response will be a series of resources that are located inside that polygon). The API supports pagination, so if the area of the polygon is too big, we’ll have to do additional requests for all the result pages.</description></item></channel></rss>