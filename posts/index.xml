<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Blog</title><link>https://wsdookadr.github.io/posts/</link><description>Recent content in Posts on Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 23 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://wsdookadr.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiple instance Activitywatch remote server setup</title><link>https://wsdookadr.github.io/posts/p6/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p6/</guid><description>Intro My setup includes several laptops, a desktop, and a storage server.
Because I split my time across multiple projects, and sometimes I have a dedicated laptop for one project, I find this setup to be useful.
For some time I’ve wanted to take a closer look at how exactly I spend my time during the day, for both personal projects and client work.
I’ve tried other solutions in the past but they didn’t work very well.</description></item><item><title>Creating mosaics, clipping and removing overlapping satellite images</title><link>https://wsdookadr.github.io/posts/p5/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p5/</guid><description>Intro This post describes ways to download, clip and join satellite images. The module sentinel-mosaic is used throughout this blog post.
Background There’s a number of satellites launched by the European Space Agency that take images of Earth which are then sent to ground stations and made publicly available through the Copernicus Open Access Hub and its respective API.
In this post we’re focusing mainly on the data from Sentinel-2A and Sentinel-2B which were designed for multiple purposes, one of those purposes being land monitoring.</description></item><item><title>Polygon gridding using Geopandas and Shapely</title><link>https://wsdookadr.github.io/posts/p4/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p4/</guid><description>Intro This post will discuss some work involving maps I’ve helped a client with. The main goal of the project was collecting various datasets from web services.
One of those web services has an endpoint that receives as a parameter a series of points that define a polygon for which the API request is made (the response will be a series of resources that are located inside that polygon). The API supports pagination, so if the area of the polygon is too big, we’ll have to do additional requests for all the result pages.</description></item><item><title>Fast sub-tree containment checks</title><link>https://wsdookadr.github.io/posts/p3/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p3/</guid><description>MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], displayMath: [['$$','$$'], ['\[','\]']], processEscapes: true, processEnvironments: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], TeX: { equationNumbers: { autoNumber: "AMS" }, extensions: ["AMSmath.js", "AMSsymbols.js"] } } }); MathJax.Hub.Queue(function() { // Fix tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i There’s a problem on leetcode called &amp;#34;Subtree of Another tree&amp;#34;.</description></item><item><title>Non-standard solutions to some technical problems</title><link>https://wsdookadr.github.io/posts/p2/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p2/</guid><description>Intro When I’m interviewing for contracts or for jobs, many times I get asked what are the hardest problems I’ve had to deal with. I’ll write below some of these problems as I remember them now.
Double-counting Some years ago, I was working as a consultant in the analytics team of a top-10 Alexa website with hundreds of millions of views every month. I was tasked with finding a bug in the code that was counting page views.</description></item><item><title>Setting up the new blog</title><link>https://wsdookadr.github.io/posts/p1/</link><pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p1/</guid><description>Previous setup Previously I was writing a blog using the following: Emacs + Org-Mode + Jekyll. Here is a short assessment of that setup:
The pros:
Emacs tries to pack as much functionality as possible without the need for external dependencies
Org-Mode allows you to have runnable code blocks and include the results of said code blocks inside the rendered version of the documents. The active document concept is really nice (but nowadays that’s also achievable with Jupyter)</description></item></channel></rss>