<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog</title><link>https://wsdookadr.github.io/</link><description>Recent content on Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 04 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wsdookadr.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Solving a simple puzzle using SymPy</title><link>https://wsdookadr.github.io/posts/p9/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p9/</guid><description>I came across this problem recently:
It’s about a square that gets partitioned into rectangles of equal area (some sources call this &amp;#34;floorplan&amp;#34; ).
One of the sides of these smaller rectangles is given and the problem asks for the area of the large square.
It’s possible to build equations for:
the known side of the small rectangle
the smaller rectangle sides that add up to the same length of the large square side-length</description></item><item><title>Building offline archives</title><link>https://wsdookadr.github.io/posts/p8/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p8/</guid><description>Intro I’ve been looking into some ways to work offline.
Here are some reasons for that:
Decrease in the quality of general purpose search engine results
More targetted searches
Better response times and decreased latency for slow websites (since after I download them they’re served from my local network, maybe directly from the disk of my laptop)
Sites are disappearing at a high rate.</description></item><item><title>Packing, encrypting and uploading deliverables</title><link>https://wsdookadr.github.io/posts/p7/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p7/</guid><description>Intro Sometimes when I do client work, I don’t have time to set up Git repositories. When the work is done, I generate the invoice based on the time spent on the project, and I have to ship the deliverables.
Recently I’ve been working on a C# project, and I use a Windows10 laptop where I happen to have a WSL installed.
I could set up a continuous integration (CI) environment to trigger builds for every commit, and have the binaries available in some artifact repository, or I could set up a file server for this and use scp or sftp, but again, that’s not the case.</description></item><item><title>Multiple instance Activitywatch remote server setup for time tracking</title><link>https://wsdookadr.github.io/posts/p6/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p6/</guid><description>Intro My setup includes several laptops, a desktop, and a storage server.
Because I split my time across multiple projects, and sometimes I have a dedicated laptop for one project, I find this setup to be useful.
For some time I’ve wanted to take a closer look at how exactly I spend my time during the day, for both personal projects and client work.
I’ve tried other solutions in the past but they didn’t work very well.</description></item><item><title>Creating mosaics, clipping and removing overlapping satellite images</title><link>https://wsdookadr.github.io/posts/p5/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p5/</guid><description>Intro This post describes ways to download, clip and join satellite images. The module sentinel-mosaic is used throughout this blog post.
Background There’s a number of satellites launched by the European Space Agency that take images of Earth which are then sent to ground stations and made publicly available through the Copernicus Open Access Hub and its respective API.
In this post we’re focusing mainly on the data from Sentinel-2A and Sentinel-2B which were designed for multiple purposes, one of those purposes being land monitoring.</description></item><item><title>Polygon gridding using Geopandas and Shapely</title><link>https://wsdookadr.github.io/posts/p4/</link><pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p4/</guid><description>Intro This post will discuss some work involving maps I’ve helped a client with. The main goal of the project was collecting various datasets from web services.
One of those web services has an endpoint that receives as a parameter a series of points that define a polygon for which the API request is made (the response will be a series of resources that are located inside that polygon). The API supports pagination, so if the area of the polygon is too big, we’ll have to do additional requests for all the result pages.</description></item><item><title>Fast sub-tree containment checks</title><link>https://wsdookadr.github.io/posts/p3/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p3/</guid><description>MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], displayMath: [['$$','$$'], ['\[','\]']], processEscapes: true, processEnvironments: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], TeX: { equationNumbers: { autoNumber: "AMS" }, extensions: ["AMSmath.js", "AMSsymbols.js"] } } }); MathJax.Hub.Queue(function() { // Fix tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i There’s a problem on leetcode called &amp;#34;Subtree of Another tree&amp;#34;.</description></item><item><title>Non-standard solutions to some technical problems</title><link>https://wsdookadr.github.io/posts/p2/</link><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p2/</guid><description>Intro When I’m interviewing for contracts or for jobs, many times I get asked what are the hardest problems I’ve had to deal with. I’ll write below some of these problems as I remember them now.
Double-counting Some years ago, I was working as a consultant in the analytics team of a top-10 Alexa website with hundreds of millions of views every month. I was tasked with finding a bug in the code that was counting page views.</description></item><item><title>Setting up the new blog</title><link>https://wsdookadr.github.io/posts/p1/</link><pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/posts/p1/</guid><description>Previous setup Previously I was writing a blog using the following: Emacs + Org-Mode + Jekyll. Here is a short assessment of that setup:
The pros:
Emacs tries to pack as much functionality as possible without the need for external dependencies
Org-Mode allows you to have runnable code blocks and include the results of said code blocks inside the rendered version of the documents. The active document concept is really nice (but nowadays that’s also achievable with Jupyter)</description></item><item><title>Services</title><link>https://wsdookadr.github.io/services/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/services/</guid><description>I’m offering services related to databases, custom software (including custom addons, modules etc), automation, infrastructure and documentation.
If you need more details or want a quote for a project send an e-mail to stefan.petrea@gmail.com.
Opensource contributions type technologies used links date docs improvements
Perl
link
2021-06-09
bugfix
Perl
link, link</description></item><item><title>Supported Technologies</title><link>https://wsdookadr.github.io/supported-tech/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wsdookadr.github.io/supported-tech/</guid><description>Check the Services page for a list of services provided for these technologies Web servers: Nginx, Apache2, HAProxy
Web frameworks: Django, Mojolicious
Operating Systems: Ubuntu LTS, Debian, Redhat, Windows
Programming Languages: Python, Perl5, Bash, Java, XQuery, SQL (multiple dialects, including plpgsql)
Monitoring: Nagios, Icinga, Prometheus, Grafana, Elasticsearch, Kibana
Databases: PostgreSQL, MySQL, SQLite, Redis, BaseX</description></item></channel></rss>